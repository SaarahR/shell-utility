package Core;

import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JSpinner.DefaultEditor;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author sidra
 */
public class addReminder extends javax.swing.JFrame {

    private static final DateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");

    public addReminder() {
        initComponents();
        this.setResizable(false);
        setLocationRelativeTo(this);

        //Remove selected radio buttons by default
        dailyRadioCircle.setVisible(false);
        weeklyRadioCircle.setVisible(false);
        monthlyRadioCircle.setVisible(false);
        yearlyRadioCircle.setVisible(false);

        highRadioCircle.setVisible(false);
        jXDatePicker2.getEditor().setEditable(false);
        ((DefaultEditor) due_time.getEditor()).getTextField().setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        repeat = new javax.swing.ButtonGroup();
        priority = new javax.swing.ButtonGroup();
        title = new javax.swing.JLabel();
        jXDatePicker2 = new org.jdesktop.swingx.JXDatePicker();
        Date date = new Date();
        SpinnerDateModel sm= new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        due_time = new javax.swing.JSpinner(sm);
        neverRadioCircle = new javax.swing.JLabel();
        dailyRadioCircle = new javax.swing.JLabel();
        weeklyRadioCircle = new javax.swing.JLabel();
        monthlyRadioCircle = new javax.swing.JLabel();
        yearlyRadioCircle = new javax.swing.JLabel();
        standardRadioCircle = new javax.swing.JLabel();
        highRadioCircle = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        errorMessage = new javax.swing.JLabel();
        background = new javax.swing.JLabel();
        neverRadio = new javax.swing.JRadioButton();
        dailyRadio = new javax.swing.JRadioButton();
        weeklyRadio = new javax.swing.JRadioButton();
        monthlyRadio = new javax.swing.JRadioButton();
        yearlyRadio = new javax.swing.JRadioButton();
        standardRadio = new javax.swing.JRadioButton();
        highRadio = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(650, 500));
        setUndecorated(true);
        getContentPane().setLayout(null);

        title.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        title.setForeground(new java.awt.Color(74, 72, 65));
        getContentPane().add(title);
        title.setBounds(30, 20, 590, 50);

        jXDatePicker2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker2ActionPerformed(evt);
            }
        });
        getContentPane().add(jXDatePicker2);
        jXDatePicker2.setBounds(190, 110, 220, 40);

        JSpinner.DateEditor de= new JSpinner.DateEditor(due_time, "HH:mm:ss");
        due_time.setEditor(de);
        due_time.setModel(new javax.swing.SpinnerDateModel());
        due_time.setBorder(null);
        due_time.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                due_timeMouseClicked(evt);
            }
        });
        getContentPane().add(due_time);
        due_time.setBounds(192, 170, 212, 30);
        due_time.getAccessibleContext().setAccessibleName("");

        neverRadioCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/Extras/RadioSelectedCircle.png"))); // NOI18N
        getContentPane().add(neverRadioCircle);
        neverRadioCircle.setBounds(197, 244, 10, 8);

        dailyRadioCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/Extras/RadioSelectedCircle.png"))); // NOI18N
        getContentPane().add(dailyRadioCircle);
        dailyRadioCircle.setBounds(307, 244, 10, 8);

        weeklyRadioCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/Extras/RadioSelectedCircle.png"))); // NOI18N
        getContentPane().add(weeklyRadioCircle);
        weeklyRadioCircle.setBounds(411, 244, 10, 8);

        monthlyRadioCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/Extras/RadioSelectedCircle.png"))); // NOI18N
        getContentPane().add(monthlyRadioCircle);
        monthlyRadioCircle.setBounds(522, 243, 10, 8);

        yearlyRadioCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/Extras/RadioSelectedCircle.png"))); // NOI18N
        getContentPane().add(yearlyRadioCircle);
        yearlyRadioCircle.setBounds(197, 289, 10, 8);

        standardRadioCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/Extras/RadioSelectedCircle.png"))); // NOI18N
        getContentPane().add(standardRadioCircle);
        standardRadioCircle.setBounds(196, 353, 10, 8);

        highRadioCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/Extras/RadioSelectedCircle.png"))); // NOI18N
        getContentPane().add(highRadioCircle);
        highRadioCircle.setBounds(358, 351, 10, 8);

        saveButton.setBorder(null);
        saveButton.setContentAreaFilled(false);
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(saveButton);
        saveButton.setBounds(124, 420, 160, 47);

        cancelButton.setBorderPainted(false);
        cancelButton.setContentAreaFilled(false);
        cancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton);
        cancelButton.setBounds(377, 420, 160, 47);

        errorMessage.setFont(new java.awt.Font("Aliquam", 1, 14)); // NOI18N
        errorMessage.setForeground(new java.awt.Color(74, 72, 65));
        getContentPane().add(errorMessage);
        errorMessage.setBounds(433, 113, 180, 36);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/addReminder.jpg"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 650, 500);

        repeat.add(neverRadio);
        neverRadio.setSelected(true);
        neverRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                neverRadioMouseClicked(evt);
            }
        });
        getContentPane().add(neverRadio);
        neverRadio.setBounds(190, 240, 90, 21);

        repeat.add(dailyRadio);
        dailyRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dailyRadioMouseClicked(evt);
            }
        });
        getContentPane().add(dailyRadio);
        dailyRadio.setBounds(300, 240, 70, 21);

        repeat.add(weeklyRadio);
        weeklyRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weeklyRadioMouseClicked(evt);
            }
        });
        getContentPane().add(weeklyRadio);
        weeklyRadio.setBounds(405, 237, 90, 20);

        repeat.add(monthlyRadio);
        monthlyRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthlyRadioMouseClicked(evt);
            }
        });
        getContentPane().add(monthlyRadio);
        monthlyRadio.setBounds(518, 236, 102, 21);

        repeat.add(yearlyRadio);
        yearlyRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                yearlyRadioMouseClicked(evt);
            }
        });
        getContentPane().add(yearlyRadio);
        yearlyRadio.setBounds(190, 283, 80, 20);

        priority.add(standardRadio);
        standardRadio.setSelected(true);
        standardRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                standardRadioMouseClicked(evt);
            }
        });
        standardRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardRadioActionPerformed(evt);
            }
        });
        getContentPane().add(standardRadio);
        standardRadio.setBounds(190, 343, 102, 30);

        priority.add(highRadio);
        highRadio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                highRadioMouseClicked(evt);
            }
        });
        getContentPane().add(highRadio);
        highRadio.setBounds(350, 340, 70, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jXDatePicker2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker2ActionPerformed

    }//GEN-LAST:event_jXDatePicker2ActionPerformed

    private void standardRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_standardRadioActionPerformed

    private void neverRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_neverRadioMouseClicked
        // TODO add your handling code here:
        neverRadioCircle.setVisible(true);
        dailyRadioCircle.setVisible(false);
        weeklyRadioCircle.setVisible(false);
        monthlyRadioCircle.setVisible(false);
        yearlyRadioCircle.setVisible(false);
    }//GEN-LAST:event_neverRadioMouseClicked

    private void dailyRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dailyRadioMouseClicked
        // TODO add your handling code here:
        neverRadioCircle.setVisible(false);
        dailyRadioCircle.setVisible(true);
        weeklyRadioCircle.setVisible(false);
        monthlyRadioCircle.setVisible(false);
        yearlyRadioCircle.setVisible(false);
    }//GEN-LAST:event_dailyRadioMouseClicked

    private void weeklyRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weeklyRadioMouseClicked
        // TODO add your handling code here:
        neverRadioCircle.setVisible(false);
        dailyRadioCircle.setVisible(false);
        weeklyRadioCircle.setVisible(true);
        monthlyRadioCircle.setVisible(false);
        yearlyRadioCircle.setVisible(false);
    }//GEN-LAST:event_weeklyRadioMouseClicked

    private void monthlyRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthlyRadioMouseClicked
        // TODO add your handling code here:
        neverRadioCircle.setVisible(false);
        dailyRadioCircle.setVisible(false);
        weeklyRadioCircle.setVisible(false);
        monthlyRadioCircle.setVisible(true);
        yearlyRadioCircle.setVisible(false);
    }//GEN-LAST:event_monthlyRadioMouseClicked

    private void yearlyRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yearlyRadioMouseClicked
        // TODO add your handling code here:
        neverRadioCircle.setVisible(false);
        dailyRadioCircle.setVisible(false);
        weeklyRadioCircle.setVisible(false);
        monthlyRadioCircle.setVisible(false);
        yearlyRadioCircle.setVisible(true);
    }//GEN-LAST:event_yearlyRadioMouseClicked

    private void standardRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_standardRadioMouseClicked
        // TODO add your handling code here:
        standardRadioCircle.setVisible(true);
        highRadioCircle.setVisible(false);
    }//GEN-LAST:event_standardRadioMouseClicked

    private void highRadioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_highRadioMouseClicked
        // TODO add your handling code here:
        standardRadioCircle.setVisible(false);
        highRadioCircle.setVisible(true);
    }//GEN-LAST:event_highRadioMouseClicked

    private void due_timeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_due_timeMouseClicked


    }//GEN-LAST:event_due_timeMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        boolean error = false;
        boolean prior = false;
        String reminderTitle = title.getText();

        remindersHelper reminder = new remindersHelper();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat outputFormat = new SimpleDateFormat("yyyy/MM/dd");
        jXDatePicker2.setFormats(dateFormat);

        Date date = new Date();
        String currDate = sdf.format(date);
        currDate = currDate.substring(0, currDate.length() - 9);
        
        if(jXDatePicker2.getDate() == null){
            error = true;
        }
        
        String dateToStore = "0000/00/00";
        
        if(error == false){   
            dateToStore = outputFormat.format(jXDatePicker2.getDate()).toString();
        } else {
            error = true;
            errorMessage.setText("When do we remind you?");
        }

        String timeToStore = due_time.getValue().toString();
        timeToStore = timeToStore.substring(11, timeToStore.length() - 9);
        
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        ((DefaultEditor) due_time.getEditor()).getTextField().setEditable(false);

        Date date1 = null, date2 = null;

        try {
            date1 = dateFormat.parse(currDate);
            date2 = dateFormat.parse(dateToStore);
        } catch (ParseException ex) {
            Logger.getLogger(addReminder.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (date1.compareTo(date2)> 0) {
            error = true;
            errorMessage.setText("Do you live in the past?");
        }

        String datetime = dateToStore + " " + timeToStore;
        datetime = datetime.substring(0, datetime.length() - 3);
        datetime = datetime.substring(0, datetime.length() - 2);

        if (highRadio.isSelected()) {
            prior = true;
        } else if (standardRadio.isSelected()) {
            prior = false;
        }

        int radioVal = 0;
        boolean repeat_state = true;

        if (dailyRadio.isSelected()) {
            radioVal = 1;
        } else if (monthlyRadio.isSelected()) {
            radioVal = 3;
        } else if (neverRadio.isSelected()) {
            radioVal = 0;
            repeat_state = false;
        } else if (weeklyRadio.isSelected()) {
            radioVal = 2;
        } else if (yearlyRadio.isSelected()) {
            radioVal = 4;
        }
        if (error == false) {
            reminder.insertReminder(reminderTitle, radioVal, prior, datetime, repeat_state);
            
            Reminders window = new Reminders();

            window.setVisible(true);
            this.setVisible(false);

            dispose();
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addReminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addReminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addReminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addReminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addReminder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton dailyRadio;
    private javax.swing.JLabel dailyRadioCircle;
    private javax.swing.JSpinner due_time;
    private javax.swing.JLabel errorMessage;
    private javax.swing.JRadioButton highRadio;
    private javax.swing.JLabel highRadioCircle;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker2;
    private javax.swing.JRadioButton monthlyRadio;
    private javax.swing.JLabel monthlyRadioCircle;
    private javax.swing.JRadioButton neverRadio;
    private javax.swing.JLabel neverRadioCircle;
    private javax.swing.ButtonGroup priority;
    private javax.swing.ButtonGroup repeat;
    private javax.swing.JButton saveButton;
    private javax.swing.JRadioButton standardRadio;
    private javax.swing.JLabel standardRadioCircle;
    public static javax.swing.JLabel title;
    private javax.swing.JRadioButton weeklyRadio;
    private javax.swing.JLabel weeklyRadioCircle;
    private javax.swing.JRadioButton yearlyRadio;
    private javax.swing.JLabel yearlyRadioCircle;
    // End of variables declaration//GEN-END:variables
}
//
